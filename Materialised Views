-- Notes: Creating temporary named result set using common table expression (CTE) and use elements from here to calculate rate.

CREATE MATERIALIZED VIEW
    at2_datamart.Question_1_1_active_listings_rate AS

WITH cte AS
    (
SELECT
	h.neighbourhood_cleansed,
	t.year_month,
	count(case when p.has_availability = 't' then 1 ELSE NULL END) as active_listings,
	count(*) as total_listings
FROM	
	bde_at2.air_bnb_fact f
INNER JOIN 
	bde_at2.dim_property p 
   	ON p.p_id = f.p_id
INNER JOIN 
	bde_at2.dim_host h 
   	ON h.h_id = f.h_id
INNER JOIN 
	bde_at2.dim_time t 
   	ON t.t_id = f.t_id
group by
	h.neighbourhood_cleansed,
	t.year_month
)

SELECT
    neighbourhood_cleansed,
	year_month,
	active_listings,
	total_listings,
	ROUND(CAST(active_listings AS numeric)/(total_listings),2) AS active_listings_rate
		
FROM
    cte
   
ORDER BY
	year_month asc,
	neighbourhood_cleansed
;

-- Notes: Using ordered-set aggregate to calculate median price.

CREATE MATERIALIZED VIEW
	at2_datamart.Question_1_2_min_max_med_avg AS

SELECT
	h.neighbourhood_cleansed,
	t.year_month,
	ROUND(min(price),2) as min_price,
	ROUND(max(price),2) as max_price,
    ROUND(percentile_disc(0.5) within group (order by price),2) median_price,
	ROUND(avg(price),2) as average_price

FROM	
	bde_at2.air_bnb_fact f
INNER JOIN 
	bde_at2.dim_property p 
   	ON p.p_id = f.p_id
INNER JOIN 
	bde_at2.dim_host h 
   	ON h.h_id = f.h_id
INNER JOIN 
	bde_at2.dim_time t 
   	ON t.t_id = f.t_id
group by
	h.neighbourhood_cleansed,
	t.year_month
order by
   	t.year_month asc,
	h.neighbourhood_cleansed
;

-- Notes: 

CREATE MATERIALIZED VIEW
	at2_datamart.Question_1_3_distinct_hosts AS

SELECT
	h.neighbourhood_cleansed,
	t.year_month,
	COUNT(DISTINCT host_id) as distinct_host_count
FROM	
	bde_at2.dim_host h

INNER JOIN 
	bde_at2.air_bnb_fact f 
   	ON f.h_id = h.h_id
INNER JOIN 
	bde_at2.dim_time t 
   	ON t.t_id = f.t_id
group by
	h.neighbourhood_cleansed,
	t.year_month
order by
   	t.year_month asc,
	h.neighbourhood_cleansed

;

-- Notes: Creating temporary named result set using common table expression (CTE) and use elements from here to calculate rate.

CREATE MATERIALIZED VIEW
	at2_datamart.Question_1_4_superhost_rate AS

WITH cte AS
    (
SELECT
	
	h.neighbourhood_cleansed,
	t.year_month,
	COUNT(DISTINCT CASE
    	WHEN h.host_is_superhost ='t'
    	THEN h.host_id
    	ELSE NULL END)
	AS distinct_super_host_count,
COUNT(DISTINCT h.host_id) as distinct_host_count
	
FROM	
	bde_at2.air_bnb_fact f

INNER JOIN 
	bde_at2.dim_host h 
   	ON h.h_id = f.h_id
INNER JOIN 
	bde_at2.dim_time t 
   	ON t.t_id = f.t_id
group by
	h.neighbourhood_cleansed,
	t.year_month
)

SELECT
	neighbourhood_cleansed,
	year_month,
	ROUND(CAST(distinct_super_host_count AS numeric)/(distinct_host_count),2) AS superhost_rate	
FROM
    cte c
ORDER BY
	year_month asc,
	neighbourhood_cleansed    
;

CREATE MATERIALIZED VIEW
    at2_datamart.question_1_5_active_listing_avg_review_score_rating AS

SELECT
	h.neighbourhood_cleansed,
	t.year_month,
	ROUND(avg(f.review_scores_rating),2) as average_review_scores_rating
FROM	
	bde_at2.air_bnb_fact f
INNER JOIN 
	bde_at2.dim_property p 
   	ON p.p_id = f.p_id
INNER JOIN 
	bde_at2.dim_host h 
   	ON h.h_id = f.h_id
INNER JOIN 
	bde_at2.dim_time t 
   	ON t.t_id = f.t_id
where
	p.has_availability = 't' and 	-- active listings
	review_scores_rating != 'NaN' 	-- not including NaN values, which will not allow an aggregate to be calculated
group by
	h.neighbourhood_cleansed,
	t.year_month
ORDER BY
	year_month asc,
	neighbourhood_cleansed
	;

CREATE VIEW
    at2_datamart.active_listings_view AS

	SELECT
		h.neighbourhood_cleansed,
		t.year_month,
		count(case when p.has_availability = 't' then 1 ELSE NULL END) as active_listings
	FROM	
		bde_at2.air_bnb_fact f
	INNER JOIN 
		bde_at2.dim_property p 
		ON p.p_id = f.p_id
	INNER JOIN 
		bde_at2.dim_host h 
		ON h.h_id = f.h_id
	INNER JOIN 
		bde_at2.dim_time t 
		ON t.t_id = f.t_id
	group by
		h.neighbourhood_cleansed,
		t.year_month
	ORDER BY
	year_month asc,
	neighbourhood_cleansed
;

CREATE MATERIALIZED VIEW
at2_datamart.Q1_6_percentage_change_for_active_listings as

SELECT 
	neighbourhood_cleansed,
	year_month,
	active_listings,
	(CAST(active_listings AS numeric)/LAG(SUM(active_listings), 1) OVER (ORDER BY neighbourhood_cleansed,year_month)-1) AS Running_Diff_Per		
FROM
    at2_datamart.active_listings_view
 GROUP BY
            1,
            active_listings_view.year_month,
            active_listings_view.active_listings
;






